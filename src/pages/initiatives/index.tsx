import React, { useState } from "react";
import moment from "moment";
import { Table } from "../../components/table";
import data from "../../latest.json";
import "./style.css";
import { Link } from "react-router-dom";


enum ColumnGroup {
  All,
  Descriptive,
  Statistical,
  None
}


const columns = [
  {
    key: "_id",
    name: "Mongo ID",
    group: ColumnGroup.None
  },
  {
    key: "id",
    name: "ID",
    group: ColumnGroup.None
  },
  {
    key: "scrapeID",
    name: "Scrape Batch ID",
    group: ColumnGroup.None
  },
  {
    key: "name",
    name: "Name",
    group: ColumnGroup.All
  },
  {
    key: "isPublic",
    name: "Public",
    group: ColumnGroup.Descriptive
  },
  {
    key: "description",
    name: "Description",
    group: ColumnGroup.Descriptive
  },
  {
    key: "locations",
    name: "Locations",
    group: ColumnGroup.Descriptive
  },
  {
    key: "scrapedAt",
    name: "Last Updated",
    group: ColumnGroup.Statistical
  },
  {
    key: "foundedOn",
    name: "Created",
    group: ColumnGroup.Statistical
  },
  {
    key: "memberCount",
    name: "Members",
    group: ColumnGroup.Statistical
  },
  {
    key: "memberCountIncreaseWeekly",
    name: "Weekly Growth",
    group: ColumnGroup.Statistical
  },
  {
    key: "postCountIncreaseDaily",
    name: "Daily Posts",
    group: ColumnGroup.Statistical
  },
  {
    key: "postCountIncreaseMonthly",
    name: "Monthly Posts",
    group: ColumnGroup.Statistical
  },
];

const filter = (input: string) => {
  const MIN_LENGTH = 30;
  if (input === "Public") return undefined;
  if (input.length < MIN_LENGTH) return undefined;
  return input;
};

const shorten = (input?: string) => {
  const MAX_LENGTH = 100;
  if (!input) return "";
  if (input.length > MAX_LENGTH) return input.slice(0, MAX_LENGTH) + "...";
  return input;
};

export const InitiativeDirectory = () => {

  const [columnGroup, setColumnGroup] = useState<ColumnGroup>(ColumnGroup.Descriptive);

  const changeGroup = (targetGroup: ColumnGroup) => () => {
    setColumnGroup(targetGroup);
  }

  return (
    <div className="directory">
      <h1>PPE Initiative Directory</h1>
      <p>
        The table below is generated by scraping Facebook once a day. If you dont
        see an initiative, <Link to="/initiatives/submit">add it here</Link>.{" "}
        <strong>
          Please submit any and all initiatives, not just those on Facebook.
        </strong>
      </p>
      <div className="tab">
        <span
          className={columnGroup === ColumnGroup.Descriptive ? "tabItem active" : "tabItem"}
          onClick={changeGroup(ColumnGroup.Descriptive)}
        >
          Description
        </span>
        <span
          className={columnGroup === ColumnGroup.Statistical ? "tabItem active" : "tabItem"}
          onClick={changeGroup(ColumnGroup.Statistical)}
        >
          Statistics
        </span>
      </div>
      <Table
        columns={columns.filter((col) => {
          return (col.group === ColumnGroup.All || col.group === columnGroup)
        })}
        data={data.map((entry) => ({
          ...entry,
          name: (
            <a
              href={`https://facebook.com/groups/${entry.id}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              {entry.name}
            </a>
          ),
          description: filter(shorten(entry.description)),
          foundedOn: moment(entry.foundedOn).format("YYYY-MM-DD"),
          scrapedAt: moment(entry.scrapedAt).fromNow(),
          isPublic: entry.isPublic ? "Yes" : "No",
        }))}
      />
    </div>
  );
}
